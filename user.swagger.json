{
  "swagger": "2.0",
  "info": {
    "title": "Resonate Service Documentation: User",
    "version": "2.0.2"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/restricted/user/{id}": {
      "get": {
        "summary": "Get a user's restricted information",
        "description": "Get user profile from the server including private information.",
        "operationId": "ResonateUser_GetUserRestricted",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserPrivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user from the server.",
        "operationId": "ResonateUser_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a user record for admins",
        "description": "Update an existing user record on the server including restricted information.",
        "operationId": "ResonateUser_UpdateUserRestricted",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUserUpdateRestrictedRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "summary": "Get a user",
        "description": "Get a user's public information from the server.",
        "operationId": "ResonateUser_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserPublicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a user",
        "description": "Update an existing user record on the server.",
        "operationId": "ResonateUser_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUserUpdateRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/user/{id}/credits": {
      "get": {
        "summary": "Get user credits",
        "description": "Get user credits.",
        "operationId": "ResonateUser_GetUserCredits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserCreditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/user/{id}/membership": {
      "get": {
        "summary": "Get user membership",
        "description": "Get user membership.",
        "operationId": "ResonateUser_GetUserMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserMembershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Membership"
        ]
      }
    },
    "/api/v1/usergroup/{id}": {
      "get": {
        "summary": "Get a user group",
        "description": "Get a usergroup from the server.",
        "operationId": "ResonateUser_GetUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserGroupPublicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Usergroups"
        ]
      },
      "delete": {
        "summary": "Delete usergroup",
        "description": "Delete a usergroup from the server.",
        "operationId": "ResonateUser_DeleteUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Usergroups"
        ]
      },
      "patch": {
        "summary": "Update a user group",
        "description": "Update an existing user group record on the server.",
        "operationId": "ResonateUser_UpdateUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUserGroupUpdateRequest"
            }
          }
        ],
        "tags": [
          "Usergroups"
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "List users",
        "description": "List all users on the server.",
        "operationId": "ResonateUser_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Add a user",
        "description": "Add a user to the server.",
        "operationId": "ResonateUser_AddUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUserAddRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{id}/usergroup": {
      "post": {
        "summary": "Add a user group",
        "description": "Add a user group to the server to user resource with id: id.",
        "operationId": "ResonateUser_AddUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUserGroupCreateRequest"
            }
          }
        ],
        "tags": [
          "Usergroups"
        ]
      }
    },
    "/api/v1/users/{id}/usergroups": {
      "get": {
        "summary": "Get a list of users groups",
        "description": "Get a list of users groups owned by user from server",
        "operationId": "ResonateUser_ListUsersUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUserGroupListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Usergroups"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "userEmpty": {
      "type": "object"
    },
    "userLink": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "personalData": {
          "type": "boolean"
        }
      }
    },
    "userUserAddRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "member": {
          "type": "boolean"
        },
        "newsletterNotification": {
          "type": "boolean"
        },
        "country": {
          "type": "string"
        },
        "followedGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "userUserCreditResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "userUserGroupCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "shortBio": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "banner": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupEmail": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "userUserGroupListResponse": {
      "type": "object",
      "properties": {
        "usergroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userUserGroupPrivateResponse"
          }
        }
      }
    },
    "userUserGroupPrivateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "shortBio": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "banner": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        },
        "groupEmail": {
          "type": "string",
          "title": "repeated string followers = 9;\nrepeated string members = 10;\nrepeated string memberOfGroups = 11;\nrepeated string links = 12;\nrepeated string tags = 13;\n StreetAddress address = 13;\nPrivacy privacy = 14;\nrepeated RelatedUserGroup recommended_artists = 15;\nmap\u003cstring, string\u003e publisher = 16;\nmap\u003cstring, string\u003e pro = 17;"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "userUserGroupPublicResponse": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "shortBio": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "banner": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        },
        "followers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memberOfGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userLink"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupEmail": {
          "type": "string",
          "title": "repeated RelatedUserGroup recommended_artists = 17;\nmap\u003cstring, string\u003e publisher = 21;\nmap\u003cstring, string\u003e pro = 22;"
        }
      }
    },
    "userUserGroupUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "shortBio": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "banner": {
          "type": "string"
        },
        "groupType": {
          "type": "string"
        },
        "groupEmail": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "userUserListResponse": {
      "type": "object",
      "properties": {
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userUserPrivateResponse"
          }
        }
      }
    },
    "userUserMembershipResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "membershipClass": {
          "type": "string"
        }
      }
    },
    "userUserPrivateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "emailConfirmed": {
          "type": "boolean"
        },
        "member": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "tenantId": {
          "type": "integer",
          "format": "int32"
        },
        "newsletterNotification": {
          "type": "boolean"
        },
        "personas": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownedGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "followedGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "userUserPublicResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legacyId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "member": {
          "type": "boolean"
        },
        "personas": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownedGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "followedGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "userUserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "userUserUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "newsletterNotification": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "userUserUpdateRestrictedRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "member": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "tenantId": {
          "type": "integer",
          "format": "int32"
        },
        "newsletterNotification": {
          "type": "boolean"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "externalDocs": {
    "description": "gRPC-gateway resonate-user-api repository",
    "url": "https://github.com/resonatecoop/user-api"
  }
}

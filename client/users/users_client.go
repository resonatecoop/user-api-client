// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ResonateUserAddUser(params *ResonateUserAddUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserAddUserOK, error)

	ResonateUserDeleteUser(params *ResonateUserDeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserDeleteUserOK, error)

	ResonateUserGetUser(params *ResonateUserGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserOK, error)

	ResonateUserGetUserCredits(params *ResonateUserGetUserCreditsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserCreditsOK, error)

	ResonateUserGetUserRestricted(params *ResonateUserGetUserRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserRestrictedOK, error)

	ResonateUserListUsers(params *ResonateUserListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserListUsersOK, error)

	ResonateUserUpdateUser(params *ResonateUserUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserOK, error)

	ResonateUserUpdateUserRestricted(params *ResonateUserUpdateUserRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserRestrictedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ResonateUserAddUser adds a user

  Add a user to the server.
*/
func (a *Client) ResonateUserAddUser(params *ResonateUserAddUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserAddUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserAddUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_AddUser",
		Method:             "POST",
		PathPattern:        "/api/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserAddUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserAddUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserAddUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserDeleteUser deletes user

  Delete a user from the server.
*/
func (a *Client) ResonateUserDeleteUser(params *ResonateUserDeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/v1/restricted/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserDeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserGetUser gets a user

  Get a user's public information from the server.
*/
func (a *Client) ResonateUserGetUser(params *ResonateUserGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_GetUser",
		Method:             "GET",
		PathPattern:        "/api/v1/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserGetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserGetUserCredits gets user credits

  Get user credits.
*/
func (a *Client) ResonateUserGetUserCredits(params *ResonateUserGetUserCreditsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserCreditsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserGetUserCreditsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_GetUserCredits",
		Method:             "GET",
		PathPattern:        "/api/v1/user/{id}/credits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserGetUserCreditsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserGetUserCreditsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserGetUserCreditsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserGetUserRestricted gets a user s restricted information

  Get user profile from the server including private information.
*/
func (a *Client) ResonateUserGetUserRestricted(params *ResonateUserGetUserRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserGetUserRestrictedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_GetUserRestricted",
		Method:             "GET",
		PathPattern:        "/api/v1/restricted/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserGetUserRestrictedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserGetUserRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserGetUserRestrictedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserListUsers lists users

  List all users on the server.
*/
func (a *Client) ResonateUserListUsers(params *ResonateUserListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_ListUsers",
		Method:             "GET",
		PathPattern:        "/api/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserUpdateUser updates a user

  Update an existing user record on the server.
*/
func (a *Client) ResonateUserUpdateUser(params *ResonateUserUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_UpdateUser",
		Method:             "PATCH",
		PathPattern:        "/api/v1/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserUpdateUserRestricted updates a user record for admins

  Update an existing user record on the server including restricted information.
*/
func (a *Client) ResonateUserUpdateUserRestricted(params *ResonateUserUpdateUserRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserUpdateUserRestrictedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_UpdateUserRestricted",
		Method:             "PATCH",
		PathPattern:        "/api/v1/restricted/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserUpdateUserRestrictedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserUpdateUserRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserUpdateUserRestrictedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

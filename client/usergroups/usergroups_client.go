// Code generated by go-swagger; DO NOT EDIT.

package usergroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new usergroups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for usergroups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ResonateUserAddUserGroup(params *ResonateUserAddUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserAddUserGroupOK, error)

	ResonateUserDeleteUserGroup(params *ResonateUserDeleteUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserDeleteUserGroupOK, error)

	ResonateUserGetUserGroup(params *ResonateUserGetUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserGroupOK, error)

	ResonateUserListUsersUserGroups(params *ResonateUserListUsersUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserListUsersUserGroupsOK, error)

	ResonateUserUpdateUserGroup(params *ResonateUserUpdateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ResonateUserAddUserGroup adds a user group

  Add a user group to the server to user resource with id: id.
*/
func (a *Client) ResonateUserAddUserGroup(params *ResonateUserAddUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserAddUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserAddUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_AddUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v1/users/{id}/usergroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserAddUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserAddUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserAddUserGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserDeleteUserGroup deletes usergroup

  Delete a usergroup from the server.
*/
func (a *Client) ResonateUserDeleteUserGroup(params *ResonateUserDeleteUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserDeleteUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserDeleteUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_DeleteUserGroup",
		Method:             "DELETE",
		PathPattern:        "/api/v1/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserDeleteUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserDeleteUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserDeleteUserGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserGetUserGroup gets a user group

  Get a usergroup from the server.
*/
func (a *Client) ResonateUserGetUserGroup(params *ResonateUserGetUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserGetUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserGetUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_GetUserGroup",
		Method:             "GET",
		PathPattern:        "/api/v1/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserGetUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserGetUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserGetUserGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserListUsersUserGroups gets a list of users groups

  Get a list of users groups owned by user from server
*/
func (a *Client) ResonateUserListUsersUserGroups(params *ResonateUserListUsersUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserListUsersUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserListUsersUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_ListUsersUserGroups",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{id}/usergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserListUsersUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserListUsersUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserListUsersUserGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResonateUserUpdateUserGroup updates a user group

  Update an existing user group record on the server.
*/
func (a *Client) ResonateUserUpdateUserGroup(params *ResonateUserUpdateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResonateUserUpdateUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResonateUserUpdateUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResonateUser_UpdateUserGroup",
		Method:             "PATCH",
		PathPattern:        "/api/v1/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResonateUserUpdateUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResonateUserUpdateUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResonateUserUpdateUserGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
